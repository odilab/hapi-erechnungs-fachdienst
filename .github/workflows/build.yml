name: Build Erechnungs Fachdienst Docker Image for Dev Environment
on:
  pull_request:    
  workflow_dispatch:
  push:
    branches: [ master ]  

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository for Deployment
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
            
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Login Github Registry
        id: login_registry
        uses: docker/login-action@v3
        with:
           registry: ghcr.io
           username: ${{ github.actor }} 
           password: ${{ secrets.PAT_GHCR_TEST_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
           context: .
           platforms: linux/amd64
           push: true
           tags: ghcr.io/odilab/hapi-erezept-fachdienst:latest      
  
  pull:
    needs: build
    runs-on: ubuntu-latest              
    steps:
    - name: Checkout Repository for Deployment
      uses: actions/checkout@v4.2.2
      
    - name: Login Github Registry
      id: login_registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }} 
        password: ${{ secrets.PAT_GHCR_TEST_TOKEN }}  
        
    - name: SSH and run commands on remote server
      uses: appleboy/ssh-action@master      
      with:
        host: "${{ env.SERVER_IP }}" # Die zuvor ausgewählte Server-IP
        username: root # Der Benutzername für den SSH-Login
        key: "${{ secrets.SSH_PRIVATE_KEY_ERP_DEV }}" # Das private SSH-Schlüssel-Geheimnis
        port: 22 # Optional: Der SSH-Port (Standard ist 22)
        script: |
            # Verzeichnis für die docker-compose.yml erstellen
            mkdir -p /app/compose-erechnung
            # Docker-Container herunterfahren
            #docker compose -f /app/compose-e-rezept/docker-compose.yml down
            # Docker-Images herunterladen
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/odilab/hapi-erezept-fachdienst:latest
     
  deploy:
    needs: pull
    runs-on: ubuntu-latest              
    steps:
    - name: Checkout Repository for Deployment
      uses: actions/checkout@v4.2.2
    - name: Login Github Registry
      id: login_registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }} 
        password: ${{ secrets.GITHUB_TOKEN }}  

    - name: Print Workspace Content
      run: |
        ls ${{ github.workspace }}   
        
    - name: Pull images and start containers
      id: docker_compose
      env:
        SCRIPTPATH: '~/.ssh'
        COMPOSE_FILE: ''        
      shell: bash
      run: |
        COMPOSE_FILE=$GITHUB_WORKSPACE/docker-compose-production.yml
        mkdir -p ${{ env.SCRIPTPATH }}
        chmod 700 ${{ env.SCRIPTPATH }}
        echo "${{ secrets.SSH_PRIVATE_KEY_ERP_DEV }}" > ${{ env.SCRIPTPATH }}/id_deploy.key
        chmod 600 ${{ env.SCRIPTPATH }}/*.key
        ssh-keygen -f ${{ env.SCRIPTPATH }}/id_deploy.key -y > ${{ env.SCRIPTPATH }}/id_deploy.pub        
        chmod 644 ${{ env.SCRIPTPATH }}/*.pub
        eval $(ssh-agent -s)
        ssh-add ${{ env.SCRIPTPATH }}/id_deploy.key
        ssh-keyscan "${{ env.SERVER_IP }}" >> ${{ env.SCRIPTPATH }}/known_hosts
        chmod 644 ${{ env.SCRIPTPATH }}/known_hosts
        # Kopieren der aktuellen docker-compose-dev.yml auf den Server
        scp $COMPOSE_FILE root@"${{ env.SERVER_IP }}":/app/compose-erechnung/docker-compose.yml
        # Hochfahren der docker container und der restart des nginx
        #ssh root@"${{ env.SERVER_IP }}" "docker compose -f /app/compose-e-rezept/docker-compose.yml up -d; systemctl restart nginx"
        # Lösche unnötige Docker Images
        #ssh root@"${{ env.SERVER_IP }}" "docker image prune --force"
            
#   notification:
#       runs-on: ubuntu-latest
#       needs: [deploy, pull, build]
#       if: failure() 
#       steps:  
#       - name: Send mail
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.ionos.de
#           server_port: 465
#           secure: true
#           username: ${{ vars.IONOS_MAIL }}
#           password: ${{ secrets.IONOS_MAIL_PASSWORD }}
#           subject: Notification for ${{ github.repository }} deployment
#           to: ${{ vars.MAIL_RECEIVER }}
#           from: ${{ vars.IONOS_MAIL }} 
#           body: Deploy job in workflow ${{ github.workflow }} has deployed the Docker Image of ${{ github.repository }} on dev environment with ${{ job.status }}. The failure happens in job ${{ github.job }}.
#           ignore_cert: true
#           priority: high